{"This Website":{"title":"This Website","description":"My first technical post","body":"<p>This marks the first technical blog post I have ever written, so here goes nothing. What you&#39;re currently looking at is the first website I have ever actually taken all the way to production. Let me tell you about how the site was written.</p>\n<h2 id=\"node-js-and-express-js\">Node.js and Express.js</h2>\n<p>As stated on the <a href=\"http://nodejs.org\">node.js</a> website:</p>\n<blockquote>\n<p>Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications.</p>\n</blockquote>\n<p>As opposed to spinning up a new thread for each user that comes to your site, node operates on a single thread and uses non-blocking io operations. This allows it to easily support thousands of connections.  Another nice advantage to node.js that might be overlooked is the ability to write server-side and client-side code in the same language.</p>\n<p>In addition, node ships with its own package manager, <a href=\"https://www.npmjs.com/\">npm</a>. Through its use of the package.json file, it is easy to manage your project&#39;s packages.</p>\n<p><a href=\"http://expressjs.com\">Express.js</a> is a minimalist web framework that sits over top of node and allows you to more easily develop web apis/apps/etc. One of the key features of express is it&#39;s use of middleware, which allow you to easily inject additional functionality into your web apps. This also keeps express.js from becoming overly bloated. Here&#39;s what an example hello world app would look like using node/express.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">address</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Example app listening at http://%s:%s&#39;</span><span class=\"p\">,</span> <span class=\"nx\">host</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre><p>This website was written using node/express. You can view the code <a href=\"&#39;http://github.com/cdpetty/website&#39;\">here</a>.</p>\n<hr>\n<h2 id=\"grunt-the-javascript-task-runner\">Grunt - The JavaScript Task Runner</h2>\n<p>This website makes use of Grunt. It makes getting all of your code production-ready easy (minifying, compiling templates, etc) through the use of grunt tasks and plugins downloaded through npm. To setup grunt, first you need install the command line grunt client:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">-</span><span class=\"nx\">g</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">cli</span>\n</pre></div>\n\n</code></pre><p>as well as the local grunt module:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span>\n</pre></div>\n\n</code></pre><p>Then create a Gruntfile.js in your project directory.  Here is snippet of my grunt file that I use to add vendor prefixes, combine and minify the css into a single file, and then clean up the temporary files.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n  <span class=\"c1\">// Project configuration.</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">pkg</span><span class=\"o\">:</span> <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">readJSON</span><span class=\"p\">(</span><span class=\"s1\">&#39;package.json&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">autoprefixer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;public/stylesheets&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;**/*.css&#39;</span> <span class=\"p\">],</span>\n        <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;release/css&#39;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">&#39;release/css/style.min.css&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span> <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">clean</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!release/css/style.min.css&#39;</span> <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">//Npm tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-cssmin&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-clean&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-autoprefixer&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">//Tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;stylesheets&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;Compiles the stylesheets.&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span> <span class=\"s1\">&#39;autoprefixer:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cssmin:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clean:stylesheets&#39;</span> <span class=\"p\">]</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre><p>Lets break down whats going on. The first section of the Gruntfile is the grunt.initConfig section.  This is the section where we configure the options for the various tasks that we want to run. In the initConfig I configure three tasks, autoprefixer, cssmin, clean. Autoprefixer is a grunt task that adds vendor prefixes to css like -webkit-, -moz-, -ms-. In the config we specify a directory for which to look for css files, a globbbing convention for finding applicable files, and a destination for the autoprefixed files.</p>\n<p>In the cssmin config we specify an output file named style.min.css and provide all of the files that have been previously autoprefixed. This will tell cssmin to squash all of the css files into a single file and then minify the whole thing.</p>\n<p>Finally we specify a clean config to get rid of all of the now irrelevant autoprefixed css files.</p>\n<p>The next section loads the actual tasks from npm. Its important to note that for each of the grunt tasks you wish to use, you need to download the corresponding grunt task through npm. For example:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">contrib</span><span class=\"o\">-</span><span class=\"nx\">cssmin</span>\n</pre></div>\n\n</code></pre><p>In the final section, we register the grunt task &#39;stylesheets&#39; and specify which tasks that were configured above should be called.</p>\n<p>Now that you&#39;ve configured your gruntfile, all you need to do to setup your stylesheets is run</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span> <span class=\"nx\">stylesheets</span>\n</pre></div>\n\n</code></pre><p>Grunt makes getting your code production ready much easier than before.  I did run into <a href=\"http://gulpjs.com/\">gulpjs</a>, a newer, stream oriented grunt-esque task manager. It is definitely worth having a look at.</p>\n<hr>\n<p>I&#39;ve enjoyed writing the post and I look forward to writing more in the future. Until then!</p>\n","time":"Sun Sep 27 2015","sortTime":"2015-09-27T00:00:00.000Z"},"Goal Driven Development":{"title":"Goal Driven Development","description":"My internship at HomeAway","body":"<h3 id=\"programming-at-a-large-company\">Programming at a Large Company</h3>\n<p>Over the summer I worked at a company called <a href=\"http://homeaway.com\">HomeAway</a>, a leader in vacation rentals with over 1 million listings world wide.  I had an amazing time working with the company from the front-end oriented project I worked on, to the managers, mentors, and coworkers I sat next to.  I learned a ton about back-end java and front-end JavaScript (both of which I used in my project while working there).  </p>\n<p>While I was there, I was exposed to a style of development that was very new to me.  I think the best name for this style would be &quot;Goal Driven Development&quot;.  While this style of development is fairly straight forward, I quickly realized that I had to take a completely different approach to projects than I had in the past. I thought I&#39;d write another blog post to talk a little more about it.</p>\n<hr>\n<h4 id=\"the-story\">The Story</h4>\n<p>Early on, I was told by my manager to try and keep my code-reads/pull-requests small so that they could be quickly and easily reviewed. Unfortunately, I didn&#39;t really think anything of this, and suddenly, three weeks later I had a single pull request that consisted of over 3,000 lines of code. As you might expect, no one has time to read and comment on 3,000 lines of code (and even if they did, they wouldn&#39;t want to).</p>\n<p>You might wonder why I suddenly came up with 3,000 lines of new code. At first, I did too.  After some thinking, I realized that this has to do with how I was used to programming.  Having never worked at a company before, all of my programming endeavors have been personal projects. In a personal project I can add features willy-nilly and I don&#39;t really have a mandated timeline to adhere to.  In addition, I have no need for anyone else to approve my code.  This means that I can work on implementing multiple features at once and never really reach any technical milestones (with the exception of actually finishing the project).</p>\n<p>This approach has its advantages. It allows for a couple of things:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Quick</span> <span class=\"nx\">addition</span><span class=\"o\">/</span><span class=\"nx\">integration</span> <span class=\"nx\">of</span> <span class=\"nx\">features</span> <span class=\"nx\">into</span> <span class=\"nx\">your</span> <span class=\"nx\">program</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Overall</span> <span class=\"p\">(</span><span class=\"nx\">probably</span><span class=\"p\">)</span> <span class=\"nx\">a</span> <span class=\"nx\">shorter</span> <span class=\"nx\">development</span> <span class=\"nx\">timeline</span>\n</pre></div>\n\n</code></pre><p>However, it has its problems as well:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">No</span> <span class=\"nx\">real</span> <span class=\"nx\">way</span> <span class=\"nx\">to</span> <span class=\"nx\">measure</span> <span class=\"nx\">progress</span> <span class=\"nx\">until</span> <span class=\"nx\">you</span> <span class=\"nx\">reach</span> <span class=\"mi\">100</span><span class=\"o\">%</span> <span class=\"nx\">completion</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">No</span> <span class=\"nx\">working</span> <span class=\"nx\">product</span> <span class=\"p\">(</span><span class=\"nx\">milestones</span><span class=\"p\">)</span> <span class=\"nx\">along</span> <span class=\"nx\">the</span> <span class=\"nx\">way</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">Usually</span> <span class=\"nx\">leads</span> <span class=\"nx\">to</span> <span class=\"nx\">less</span> <span class=\"nx\">well</span><span class=\"o\">-</span><span class=\"nx\">tested</span> <span class=\"nx\">code</span>\n<span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"nx\">In</span> <span class=\"nx\">a</span> <span class=\"nx\">professional</span> <span class=\"nx\">setting</span><span class=\"p\">,</span> <span class=\"nx\">yields</span> <span class=\"nx\">large</span> <span class=\"nx\">code</span><span class=\"o\">-</span><span class=\"nx\">reads</span><span class=\"o\">/</span><span class=\"nx\">pull</span><span class=\"o\">-</span><span class=\"nx\">requests</span>\n</pre></div>\n\n</code></pre><p>For personal projects, these problems aren&#39;t really a big deal since you don&#39;t have anyone to report to and there is no need to meet small goals along the way.  All that matters is that you emerge with a working product in the end.<br>However, in a more professional setting, these issues are very real.  </p>\n<p>The opposite approach would be to take a more goal oriented programming approach. This implies that you break down the task at hand and set aside a clear set of small goals that can be achieved in succession. Each one of these goals marks measurable progress and is likely a full set of working code (although not necessarily as full featured).  This set of working code or code changes can then be easily approved by your manager and pushed into production.</p>\n<p>This yields particular advantages like:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Measurable</span> <span class=\"nx\">progress</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Smaller</span> <span class=\"nx\">code</span> <span class=\"nx\">reads</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">More</span> <span class=\"nx\">well</span><span class=\"o\">-</span><span class=\"nx\">tested</span> <span class=\"nx\">code</span>\n</pre></div>\n\n</code></pre><p>Not to say that it doesn&#39;t have its disadvantages, e.g.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Longer</span> <span class=\"nx\">timeline</span> <span class=\"nx\">to</span> <span class=\"nx\">completion</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Slower</span> <span class=\"nx\">feature</span> <span class=\"nx\">integration</span>\n</pre></div>\n\n</code></pre><p>As stated above, well-tested code is definitely an advantage of this more goal-driven method.  If you are working on one small feature at a time, it allows you to focus solely on the implications of that feature and nothing else.  This allows you to easily find/fix bugs in your program. If you were attacking multiple features at once, it is easy to miss an edge case.</p>\n<hr>\n<h4 id=\"which-is-better-\">Which is better?</h4>\n<p>While what I have said may make sense (hopefully), it is not always easy to simply pick one of those two coding techniques. For instance, the project I was working on required a large amount of code just to get the initial prototype working as I was starting a project from scratch rather than adding a feature to an already existing service/app.  As a result, it would have been impossible for me to keep my initial code read small.  However, once I finished the basic prototype, the goal driven method was better for adding features as it lent itself to the professional setting nicely.</p>\n<p>As to which is better for general coding practices, I am not sure.  If you are submitting your code for approval, then it is likely that the goal driven technique is the way to go.  However, if you are left to your own devices you face a choice between the two. All summer I attempted to figure out which method allowed me to write better code, and which allowed me to write code more quickly.  Unfortunately, I am still not able to decide.</p>\n<p>On the one hand, writing code incrementally with features seems a little slower, however, it is often times very helpful to get to a stopping point in your project and review what you have done. It is possible that some refactoring/revisions will need to be made to make the code more concise.  Giving yourself stopping points throughout the project allows you to easily make these changes in a timely manner.</p>\n<p>On the other hand, settling down and trying to bust out an entire project with all of its features right off the bat requires a little more design time up front.  You have to spend longer understanding how the project is going to come together as a whole and how the various features will integrate with each other.  That being said, this lengthy design process near the beginning can often help you avoid the annoying refactoring that might be necessary down the road using the goal-driven method.  </p>\n<h4 id=\"wrap-up\">Wrap up</h4>\n<p>I&#39;m not exactly sure how this post came across, it was a fairly abstract concept, but I hope that you gained something from it and that it didnt appear like I was simply rambling for paragraphs and paragraphs. I loved my internship at HomeAway and I thank everyone that helped me while I was there.</p>\n","time":"Sun Sep 27 2015","sortTime":"2015-09-27T00:00:00.000Z"},"'Tis the Season":{"title":"'Tis the Season","description":"My Interview Experience","body":"<h1 id=\"interview-season-\">Interview Season!</h1>\n<p>This summer I will be interning with Microsoft in Redmond, WA. I&#39;ve traveled a long road of interviews this fall semester of my sophomore year of college.  Interview season is definitely a trying time, but strangely I really enjoy it.  I thought I would share some of my experiences and what I&#39;ve learned since last year.</p>\n<p><img src=\"http://blogs.windwardreports.com/.a/6a0115711bf0ae970b0120a7e39b84970b-pi\" alt=\"Funny Interview Picture\"></p>\n<h2 id=\"the-lineup\">The Lineup</h2>\n<p>Let&#39;s dive right in.  This semester I interviewed with Dell, Rackspace, Indeed, Hulu, Bloomberg, Google, and Microsoft.  These companies range from medium to large size and do a variety of different things.  The first thing to talk about is the general structure of the interviews.  What I found particularly interesting was the difference in interview types and quantities between all of the companies.  </p>\n<p>Here is the breakdown:</p>\n<ul>\n<li>Dell       <ul>\n<li>1 <strong>on-campus</strong> <em>behavioral</em> interview (30 min.)</li>\n</ul>\n</li>\n<li>Hulu<ul>\n<li>1 <strong>online</strong> <em>technical</em> coding challenge (6 hours)<ul>\n<li>*I did not make it further than this</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Rackspace<ul>\n<li>4 <strong>onsite</strong> <em>behavioral</em> interviews  (30 min. each)</li>\n</ul>\n</li>\n<li>Indeed<ul>\n<li>1 <strong>online</strong> <em>technical</em> coding challenge (1 hour)</li>\n<li>1 <strong>phone</strong> <em>technical</em> phone screen (45 min.)</li>\n<li>3 <strong>onsite</strong> <em>technical</em> interviews (1 hour. each)</li>\n<li>1 <strong>onsite</strong> <em>technical</em> coding challenge (1.5 hours)</li>\n</ul>\n</li>\n<li>Google<ul>\n<li>2 <strong>phone</strong> <em>technical</em> interviews (45 min. each)</li>\n<li>1 <strong>phone</strong> <em>behavioral</em> interview (15 min.)</li>\n</ul>\n</li>\n<li>Microsoft<ul>\n<li>1 <strong>on-campus</strong> <em>technical</em> interview (30 min.)</li>\n<li>4 <strong>on-site</strong> <em>technical</em> interviews (1 hour each)</li>\n</ul>\n</li>\n<li>Bloomberg<ul>\n<li>2 <strong>on-campus</strong> <em>technical</em> interviews (1 hour each)<ul>\n<li>*2 interviewers for every interviewee</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>tl;dr - I had 30, 45, and 60 minute technical interviews, 15 and 30 minute behavioral interviews, and 1, 1.5, and, 6 hour coding challenges all combined in different ways by different companies.</p>\n<p>I find it strange that this process isn&#39;t slightly more standardized or similar between companies. Each company has different needs and requirements, but the types of interviews I had varied quite a bit more than I would have expected.</p>\n<h4 id=\"why-the-difference-\">Why the difference?</h4>\n<p>Each company had their reasons for their particular interview methodologies.  Google believes its too expensive to fly prospective interns out to their campus so they simply conduct 2-3 technical phone interviews.  Rackspace believes that they know your technical background and skill level from your resume and therefore only conduct behavioral interviews to see if you&#39;re a good fit for the company and possess good communication skills.  Indeed wants to make <em>damn</em> sure you&#39;re a good coder so they bombard you with technical interviews and programming challenges. Microsoft wants to give you a chance to see if you like the culture at their campus so they fly you out all expenses paid if you make it to the final round (although thats really where they put your coding skills to the test).</p>\n<p>If this teaches you anything, it&#39;s that you need to develop the skills to handle any type of interview.  It is essential to establish strong fundamentals in coding and communication so that you can be prepared for anything that&#39;s thrown at you, be it technical, behavioral, or pure online coding.</p>\n<p>Now lets get into the specific types of interviews I encountered.</p>\n<hr>\n<h2 id=\"online-coding-challenges\">Online Coding challenges</h2>\n<p>These are pretty simple. They usually require knowledge of data structures and algorithms and can range from smaller algorithmic/math problems (like you would get at a programming competition) to implementing entire web services or interfacing with a company&#39;s web api (almost like a hack-a-thon project). I won&#39;t touch much on these because they are mostly based on personal programming skill. In my experience, these aren&#39;t as common as behavioral or technical interviews.  Most (but not all) of my online coding challenges were hosted on HackerRank</p>\n<p><a href=\"http://hackerrank.com\"><img src=\"http://www.texata.com/wp-content/uploads/2013/02/HackerRank11.jpg\" alt=\"HackerRank Logo\"></a></p>\n<p>These challenges are purely to gauge your design and coding skill.  Its important to balance code quality with correctness.  Essentially, an answer that is correct with poor code quality is better than an answer that is incorrect but has better code quality.  That being said, a partially correct answer (solves 7 out of 10 test cases) with good code quality is likely better than a fully correct solution with poor code quality.  This will vary by employer but you get the idea.</p>\n<hr>\n<h2 id=\"behavioral-interviews\">Behavioral Interviews</h2>\n<p>Behavioral interviews are important. These can be stand-alone or mixed into other interviews. Often times interviewers will throw behavioral questions into technical interviews. This happens when they ask you about your past experiences, weaknesses, strengths, etc.  A lot of times, these are used to identify the super-computer-nerds that are technically talented but lack communication skills or the ability to work well in a group setting.  </p>\n<p><img src=\"https://jobsalerts.files.wordpress.com/2011/01/tips-for-behavioral-interview.jpg\" alt=\"Behavioral Interview Guidelines\"></p>\n<h4 id=\"humble-brag-anecdote\">Humble Brag/Anecdote</h4>\n<p>The highlight of my semester was when an interviewer looked me in the eyes half way through my interview and said, &quot;You are clearly a great interviewer and are going to do very well today, so I&#39;m going to try and sell you on why you should come to this company for the summer&quot;. She proceeded to spend the next 15 minutes trying to convince me to work for her company.  This is exactly what you want out of a behavioral interview.  Your goal is to entice your interviewer into wanting your personality at their company.</p>\n<p>As the software developer role evolves, it is becoming more and more important for developers to establish good communication skills in order to better cooperate with groups, management, and customers.  In fact, almost half of my technical interview with one particular interviewer at Microsoft was spent talking about how a lot of program manager duties are starting to fall to SE. These are traditionally more feedback and interpersonal communication oriented. This is forcing employers to ensure their SE&#39;s are well equipped for these types of tasks.</p>\n<h4 id=\"preparation\">Preparation</h4>\n<p>When it comes to behavioral interviews, preparation can help immensely. Know your answers to questions like:</p>\n<ol>\n<li>What was a time you struggled?</li>\n<li>Tell me about a group project. How was the dynamic?</li>\n<li>What are your strengths?</li>\n<li>What are your weaknesses?</li>\n<li>Why do you want to work at company X?</li>\n<li>What is a time you had to deal with a troublesome group member or manager?</li>\n<li>How did you get into technology?</li>\n<li>What was your hardest project?</li>\n<li>Tell me about a project where you were crunched for time.</li>\n</ol>\n<p>I&#39;ve only listed a few, but you get the point. You can (and should) Google for more.  Also make sure you&#39;re ready to talk about anything you have listed on your resume; it&#39;s all fair game.  Behavioral questions help the interviewers get to know you as a person, not just your coding style.  In particular, this is where companies decide if you are a good fit for them.  </p>\n<p>The point is, when you are in a behavioral interview, make sure you are ready to speak enthusiastically about your past, present, and future.  Know your skills and weaknesses and how to talk about both.</p>\n<h4 id=\"sell-yourself\">Sell Yourself</h4>\n<p>Behavioral questions are often underutilized by interviewees.  This is your opportunity to clarify who you are, why you love CS (or whatever discipline you&#39;re interviewing for), why you love the company, etc.  If you are new to computer science and don&#39;t have a lot of experience you can say something like:</p>\n<blockquote>\n<p>&quot;What I lack in years of programming experience I make up for in enthusiasm for the subject, drive to learn, and communication skills.  I am always aching to explore new areas in my field. I believe the tech industry, and more specifically your company, is the perfect place to accomplish this.&quot;</p>\n</blockquote>\n<p>Basically, behavioral interviews are not to be underestimated.  They can be incredibly important and even if you have great coding skill, behavioral interviews can still impact whether or not you get the job.</p>\n<hr>\n<h2 id=\"technical-interviews\">Technical Interviews</h2>\n<p>These are the meat and potatoes (usually) of interviews for software engineer/developer positions.  Technical interviews determine your skill level for the job at hand. If you don&#39;t have the skills, you don&#39;t have the job. It&#39;s as simple as that.</p>\n<p>I would love to sit here and write a novel length post over how to approach different technical interview questions, different algorithms and data structures to use, and example problems, but the truth is, there are about a million people out there better qualified than me to explain that to you [see the resources at the bottom of this post].  What I will share with you though, is some general technical interview tips that helped me immensely.  </p>\n<p><img src=\"http://ecx.images-amazon.com/images/I/41wgksZup2L._SY344_BO1,204,203,200_.jpg\" alt=\"Cracking the Coding Interview\"></p>\n<p>The first draft of this blog post&#39;s section on technical interviews read, <em>&quot;if you can&#39;t battle your way through a technical interview, you can&#39;t get a job&quot;</em>.  However, I quickly realized that isn&#39;t the correct wording. The word <em>&quot;battle&quot;</em> is actually the opposite of how you should approach a technical interview. When participating in a technical interview, you are working to solve a problem. The more frustrated and irritated you get, the further you get from the solution.  Additionally, as you struggle with a problem its easy to unintentionally narrow your mind and prevent yourself from discovering better solutions. Remember that you&#39;re not in a battle against your interviewer; you&#39;re having a conversation with him/her. You&#39;re interviewer is not a god even though they may seem that way. It&#39;s very possible, even probable, that you (even if your a freshman) know more about a particular CS-related topic than he/she does.</p>\n<h4 id=\"speak-your-mind\">Speak Your Mind</h4>\n<p>Remember that [good] technical interviews are meant to stretch your mind. They generally don&#39;t involve questions that you can glimpse at and then spit out the linear or constant time solution for. The interviewers want to see your train of though. They want to understand the way you break down problems. So if you stand there silently for 15 minutes trying to come up with a brilliant solution to a problem, you&#39;re not giving them much to work with. They would rather see you work from O(nlog(n)) to O(n) to O(1), etc (within reason of course, don&#39;t waste your time with O(n!) answers).  </p>\n<h4 id=\"calm-success\">Calm == Success</h4>\n<p>Stay calm during your interview. There is no reason to get worked up if you are struggling. Talk to your interviewer. They want you to solve the problem. Chances are, if they see you&#39;re struggling they will offer help. You can even try and bounce ideas off of them to see their reactions and hear their thoughts (if you&#39;re sneaky about this you can occasionally get free advice...).  </p>\n<h3 id=\"technical-interview-tips\">Technical Interview Tips</h3>\n<ul>\n<li>Ask questions.</li>\n</ul>\n<p>A good interview question usually can&#39;t be solved or can&#39;t be solved optimally if you don&#39;t ask more questions about the problem. Take the most basic example I can think of:</p>\n<blockquote>\n<p><em>Write a function to sort a list.</em></p>\n</blockquote>\n<p>At first, this seems like a basic question. You might implement quicksort to solve the question in O(nlog(n)) time. But lets see what happens if:</p>\n<blockquote>\n<p><em>Question</em>: What is stored in the list?<br>Answer: Numbers.  </p>\n</blockquote>\n<p>Great, now we know what we are sorting. What if we keep asking questions?</p>\n<blockquote>\n<p><em>Question</em>: What are these numbers? Anything specific or just random integers?<br>Answer: These numbers are ages of customers.</p>\n</blockquote>\n<p><em>Boom</em>, your world just changed. Suddenly, this question can be solved in O(n) time using a list from 0 to ~125. Questions are extremely important. This example is a stretch but it illustrates a point.  Feel free to ask your interviewer for another example of the given problem, or a more detailed explanation of what he/she wants, etc.</p>\n<ul>\n<li><strong>NEVER</strong> <em>EVER</em> start programming immediately.</li>\n</ul>\n<p>While it is possible that you have been asked an easy question with a simple, this is often a trap. And if it is in fact an easy question, the interviewer may be looking for you to realize something else. You should always ask questions and talk through your solution before you start coding, ALWAYS.  Don&#39;t forget that the design process in software development is incredibly important.</p>\n<ul>\n<li>Speak clearly, confidently, and often.</li>\n</ul>\n<p>Like I said, these people want to understand how you break down a problem. If you sit there silently, they won&#39;t know anything about you. Even if you are doing something completely wrong or are completely unsure of yourself, think out loud so that they can hear your though process.</p>\n<ul>\n<li>Test your answer.</li>\n</ul>\n<p>Whenever you finish a solution to a problem, never sit back and say, &quot;I&#39;m done!&quot;. Instead say, &quot;I believe this solution is optimal and correct, but I would like to test it&quot;. Then run through the example test case (likely given to you by the interviewer at the beginning) and some additional edge cases (e.g. what happens when you pass in 0, 1, infinity, an empty array, null, etc).  </p>\n<p><img src=\"https://blog.utest.com/wp-content/uploads/sites/2/2013/06/TiP.jpg\" alt=\"Funny Testing Photo\"></p>\n<p>^^ This will not get you the job :)</p>\n<ul>\n<li>Feedback.</li>\n</ul>\n<p>One thing I learned this semester is that feedback is invaluable.  Getting rejected or accepted by a company can teach you a lot IFF you get feedback. This can mean asking your particular interviewer how you did while solving the question, how you did overall, emailing your recruiter for feedback after the interviews, or any other method of obtaining some sort of reflection on your performance.  I often times run into people who are so distraught, wondering why they didn&#39;t get an offer even though they answered all their questions correctly. If they had only gotten some form of feedback, they would know exactly why they weren&#39;t offered the job, and be able to improve for next year. If your interviewers won&#39;t give you any feedback, email your recruiter!</p>\n<p>Being turned down by a company can teach you a lot (often more than actually receiving an offer), if you get the proper feedback.</p>\n<hr>\n<h2 id=\"general-tips\">General tips</h2>\n<p>Below are some general interview season tips that I have gathered over the past two years.</p>\n<p><strong><em>Make a <a href=\"http://claytonpetty.com/clayton\">website with your picture</a></em></strong></p>\n<p>A website gives an interviewer something to look through before they meet with you (if they have time).  I once walked into a huge room with 100 other candidates and was told to go find my particular interviewer who would be holding up a name tag for me. But instead, my interviewer pulled me out of the crowd because he had gone to my website in his downtime and seen a picture of me. This made me smile :)</p>\n<p><strong><em>Practice makes perfect.</em></strong></p>\n<p>Practice, practice, practice technical interview questions. You will get exponentially better with each one. I will list some resources below.</p>\n<p><strong><em>Ask your friends about their interviews.</em></strong></p>\n<p>I keep a list of every interview question I am asked. After every interview, I go straight to a Google Doc and write them all down.  In addition, I ask my friends about their interviews, especially if they are interviewing with the same company. This is a great way to get more exposure to interview questions.</p>\n<p><strong><em>Stay on your feet.</em></strong></p>\n<p>Remember that everything isn&#39;t always going to go your way. I didn&#39;t get an interview with Facebook because after a minute of speaking with a very aggressive recruiter, he asked me a question about ray tracing that I didn&#39;t know the answer to. Right then, my chances were over; I could see it in his eyes. But something like that is no reason to get upset and feel like you can&#39;t get a job anywhere. Push through, and things will start to go your way.</p>\n<p><strong><em>The interviewer is always right</em></strong></p>\n<p>Very rarely your interviewer might bait you by saying something incorrect to see if you will correct him, but this is rare. Other than these very very very rare occasions, you should never ever ever argue with your interviewer. If he/she tells you something, its true. Chances are, they know their stuff, so don&#39;t assume you know more than them.  </p>\n<p>If you know for a 100% fact you are right and your interviewer is wrong, you can talk through it for a second, but if he seems sure of himself, drop it. You aren&#39;t doing yourself any favors by trying to convince him he&#39;s wrong.  I emphasize this point because this is one of the quickest ways to ruin your entire interview and guarantee you don&#39;t get the job.</p>\n<hr>\n<h2 id=\"closing-remarks\">Closing Remarks</h2>\n<p>Someone once said to me that they don&#39;t like interviews because, &quot;being an extrovert is hard&quot;. This is true, but its not necessarily something that you have to do. You don&#39;t have to be something that you&#39;re not. A lot of SE&#39;s are introverts as well (I&#39;m sure you&#39;ve met them).  These introverts usually identify well with other introverts. Play off your similarities. You don&#39;t have to be an extrovert to know how to talk about yourself and speak out loud.</p>\n<p>And finally, be weary of people who tell you what you should or shouldn&#39;t do. No one will ever know your exact situation, understand all of the research you&#39;ve done, or have your same personal connections.</p>\n<p><em>tl;dr</em>: It&#39;s all a game but anybody can be a winner.</p>\n<h2 id=\"resources\">Resources</h2>\n<p>Here are some helpful/interesting articles/resources I have come across and would recommend.</p>\n<ul>\n<li><p>Interesting <a href=\"https://www.quora.com/Should-I-accept-a-job-offer-from-Facebook-Google-Linkedin-or-Square/answer/David-Tan-4\">article</a> on accepting an offer.</p>\n</li>\n<li><p>Interesting <a href=\"https://www.quora.com/Should-I-accept-a-job-offer-from-Facebook-Google-Linkedin-or-Square\">article</a> on choosing between offers.</p>\n<ul>\n<li><em>*See the section on rolling a di.</em></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwii5qnwwLzJAhVDeCYKHSXaC0UQFggcMAA&amp;url=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F0B6Y3-liwHuKGcmVFS1ZlSmV5ek0%2Fedit%3Fusp%3Dsharing&amp;usg=AFQjCNFn6hZka8ldcOuQ1zYxdWI26vl7MQ&amp;sig2=gXNXcD_3N5OB-lLps2gZ0w\"><em>Cracking the coding Interview</em></a> is a pretty famous book for interview prep and practice questions.</p>\n</li>\n<li><p><a href=\"http://www.ardendertat.com/2012/01/09/programming-interview-questions/\">Practice Interview Questions</a> and solutions.</p>\n</li>\n<li><p>Google (the company) <a href=\"https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions\">Practice Questions</a>.</p>\n</li>\n<li><p>Also good to look into <a href=\"https://www.hackerrank.com/\">HackerRank</a> and <a href=\"http://www.careercup.com/\">Career Cup</a> for practice questions.</p>\n</li>\n<li><p>Good <a href=\"http://www.techinterview.org/\">source of practice problems</a>.</p>\n</li>\n<li><p><a href=\"http://visualgo.net/\">Visualizing algorithms</a> can help.</p>\n</li>\n</ul>\n<h2 id=\"disclaimer\">Disclaimer</h2>\n<p>Not everything I say is <em>fact</em> (although I&#39;d like to think it is). Different companies want different things and interviews aren&#39;t &quot;one-size-fits-all&quot;.  Make your own decisions and form your own opinions.</p>\n","time":"2015-12-05T18:49:18.798Z"}}
