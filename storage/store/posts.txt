{"This Website":{"title":"This Website","description":"My first technical post","body":"<p>This marks the first technical blog post I have ever written, so here goes nothing. What you&#39;re currently looking at is the first website I have ever actually taken all the way to production. Let me tell you about how the site was written.</p>\n<h2 id=\"node-js-and-express-js\">Node.js and Express.js</h2>\n<p>As stated on the <a href=\"http://nodejs.org\">node.js</a> website:</p>\n<blockquote>\n<p>Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications.</p>\n</blockquote>\n<p>As opposed to spinning up a new thread for each user that comes to your site, node operates on a single thread and uses non-blocking io operations. This allows it to easily support thousands of connections.  Another nice advantage to node.js that might be overlooked is the ability to write server-side and client-side code in the same language.</p>\n<p>In addition, node ships with its own package manager, <a href=\"https://www.npmjs.com/\">npm</a>. Through its use of the package.json file, it is easy to manage your project&#39;s packages.</p>\n<p><a href=\"http://expressjs.com\">Express.js</a> is a minimalist web framework that sits over top of node and allows you to more easily develop web apis/apps/etc. One of the key features of express is it&#39;s use of middleware, which allow you to easily inject additional functionality into your web apps. This also keeps express.js from becoming overly bloated. Here&#39;s what an example hello world app would look like using node/express.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">address</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Example app listening at http://%s:%s&#39;</span><span class=\"p\">,</span> <span class=\"nx\">host</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre><p>This website was written using node/express. You can view the code <a href=\"&#39;http://github.com/cdpetty/website&#39;\">here</a>.</p>\n<hr>\n<h2 id=\"grunt-the-javascript-task-runner\">Grunt - The JavaScript Task Runner</h2>\n<p>This website makes use of Grunt. It makes getting all of your code production-ready easy (minifying, compiling templates, etc) through the use of grunt tasks and plugins downloaded through npm. To setup grunt, first you need install the command line grunt client:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">-</span><span class=\"nx\">g</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">cli</span>\n</pre></div>\n\n</code></pre><p>as well as the local grunt module:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span>\n</pre></div>\n\n</code></pre><p>Then create a Gruntfile.js in your project directory.  Here is snippet of my grunt file that I use to add vendor prefixes, combine and minify the css into a single file, and then clean up the temporary files.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n  <span class=\"c1\">// Project configuration.</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">pkg</span><span class=\"o\">:</span> <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">readJSON</span><span class=\"p\">(</span><span class=\"s1\">&#39;package.json&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">autoprefixer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;public/stylesheets&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;**/*.css&#39;</span> <span class=\"p\">],</span>\n        <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;release/css&#39;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">&#39;release/css/style.min.css&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span> <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">clean</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!release/css/style.min.css&#39;</span> <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">//Npm tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-cssmin&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-clean&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-autoprefixer&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">//Tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;stylesheets&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;Compiles the stylesheets.&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span> <span class=\"s1\">&#39;autoprefixer:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cssmin:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clean:stylesheets&#39;</span> <span class=\"p\">]</span>\n  <span class=\"p\">);</span>\n</pre></div>\n\n</code></pre><p>Lets break down whats going on. The first section of the Gruntfile is the grunt.initConfig section.  This is the section where we configure the options for the various tasks that we want to run. In the initConfig I configure three tasks, autoprefixer, cssmin, clean. Autoprefixer is a grunt task that adds vendor prefixes to css like -webkit-, -moz-, -ms-. In the config we specify a directory for which to look for css files, a globbbing convention for finding applicable files, and a destination for the autoprefixed files.</p>\n<p>In the cssmin config we specify an output file named style.min.css and provide all of the files that have been previously autoprefixed. This will tell cssmin to squash all of the css files into a single file and then minify the whole thing.</p>\n<p>Finally we specify a clean config to get rid of all of the now irrelevant autoprefixed css files.</p>\n<p>The next section loads the actual tasks from npm. Its important to note that for each of the grunt tasks you wish to use, you need to download the corresponding grunt task through npm. For example:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">contrib</span><span class=\"o\">-</span><span class=\"nx\">cssmin</span>\n</pre></div>\n\n</code></pre><p>In the final section, we register the grunt task &#39;stylesheets&#39; and specify which tasks that were configured above should be called.</p>\n<p>Now that you&#39;ve configured your gruntfile, all you need to do to setup your stylesheets is run</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span> <span class=\"nx\">stylesheets</span>\n</pre></div>\n\n</code></pre><p>Grunt makes getting your code production ready much easier than before.  I did run into <a href=\"http://gulpjs.com/\">gulpjs</a>, a newer, stream oriented grunt-esque task manager. It is definitely worth having a look at.</p>\n<hr>\n<p>I&#39;ve enjoyed writing the post and I look forward to writing more in the future. Until then!</p>\n","time":"Sat Aug 22 2015"},"Goal Driven Development":{"title":"Goal Driven Development","description":"My internship at HomeAway","body":"<h3 id=\"programming-at-a-large-company\">Programming at a Large Company</h3>\n<p>Over the summer I worked at a company called <a href=\"http://homeaway.com\">HomeAway</a>, a leader in vacation rentals with over 1 million listings world wide.  I had an amazing time working with the company from the front-end oriented project I worked on, to the managers, mentors, and coworkers I sat next to.  I learned a ton about back-end java and front-end JavaScript (both of which I used in my project while working there).  </p>\n<p>While I was there, I was exposed to a style of development that was very new to me.  I think the best name for this style would be &quot;Goal Driven Development&quot;.  While this style of development is fairly straight forward, I quickly realized that I had to take a completely different approach to projects than I had in the past. I thought I&#39;d write another blog post to talk a little more about it.</p>\n<hr>\n<h4 id=\"the-story\">The Story</h4>\n<p>Early on, I was told by my manager to try and keep my code-reads/pull-requests small so that they could be quickly and easily reviewed. Unfortunately, I didn&#39;t really think anything of this, and suddenly, three weeks later I had a single pull request that consisted of over 3,000 lines of code. As you might expect, no one has time to read and comment on 3,000 lines of code (and even if they did, they wouldn&#39;t want to).</p>\n<p>You might wonder why I suddenly came up with 3,000 lines of new code. At first, I did too.  After some thinking, I realized that this has to do with how I was used to programming.  Having never worked at a company before, all of my programming endeavors have been personal projects. In a personal project I can add features willy-nilly and I don&#39;t really have a mandated timeline to adhere to.  In addition, I have no need for anyone else to approve my code.  This means that I can work on implementing multiple features at once and never really reach any technical milestones (with the exception of actually finishing the project).</p>\n<p>This approach has its advantages. It allows for a couple of things:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Quick</span> <span class=\"nx\">addition</span><span class=\"o\">/</span><span class=\"nx\">integration</span> <span class=\"nx\">of</span> <span class=\"nx\">features</span> <span class=\"nx\">into</span> <span class=\"nx\">your</span> <span class=\"nx\">program</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Overall</span> <span class=\"p\">(</span><span class=\"nx\">probably</span><span class=\"p\">)</span> <span class=\"nx\">a</span> <span class=\"nx\">shorter</span> <span class=\"nx\">development</span> <span class=\"nx\">timeline</span>\n</pre></div>\n\n</code></pre><p>However, it has its problems as well:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">No</span> <span class=\"nx\">real</span> <span class=\"nx\">way</span> <span class=\"nx\">to</span> <span class=\"nx\">measure</span> <span class=\"nx\">progress</span> <span class=\"nx\">until</span> <span class=\"nx\">you</span> <span class=\"nx\">reach</span> <span class=\"mi\">100</span><span class=\"o\">%</span> <span class=\"nx\">completion</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">No</span> <span class=\"nx\">working</span> <span class=\"nx\">product</span> <span class=\"p\">(</span><span class=\"nx\">milestones</span><span class=\"p\">)</span> <span class=\"nx\">along</span> <span class=\"nx\">the</span> <span class=\"nx\">way</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">Usually</span> <span class=\"nx\">leads</span> <span class=\"nx\">to</span> <span class=\"nx\">less</span> <span class=\"nx\">well</span><span class=\"o\">-</span><span class=\"nx\">tested</span> <span class=\"nx\">code</span>\n<span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"nx\">In</span> <span class=\"nx\">a</span> <span class=\"nx\">professional</span> <span class=\"nx\">setting</span><span class=\"p\">,</span> <span class=\"nx\">yields</span> <span class=\"nx\">large</span> <span class=\"nx\">code</span><span class=\"o\">-</span><span class=\"nx\">reads</span><span class=\"o\">/</span><span class=\"nx\">pull</span><span class=\"o\">-</span><span class=\"nx\">requests</span>\n</pre></div>\n\n</code></pre><p>For personal projects, these problems aren&#39;t really a big deal since you don&#39;t have anyone to report to and there is no need to meet small goals along the way.  All that matters is that you emerge with a working product in the end.<br>However, in a more professional setting, these issues are very real.  </p>\n<p>The opposite approach would be to take a more goal oriented programming approach. This implies that you break down the task at hand and set aside a clear set of small goals that can be achieved in succession. Each one of these goals marks measurable progress and is likely a full set of working code (although not necessarily as full featured).  This set of working code or code changes can then be easily approved by your manager and pushed into production.</p>\n<p>This yields particular advantages like:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Measurable</span> <span class=\"nx\">progress</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Smaller</span> <span class=\"nx\">code</span> <span class=\"nx\">reads</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">More</span> <span class=\"nx\">well</span><span class=\"o\">-</span><span class=\"nx\">tested</span> <span class=\"nx\">code</span>\n</pre></div>\n\n</code></pre><p>Not to say that it doesn&#39;t have its disadvantages, e.g.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">Longer</span> <span class=\"nx\">timeline</span> <span class=\"nx\">to</span> <span class=\"nx\">completion</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">Slower</span> <span class=\"nx\">feature</span> <span class=\"nx\">integration</span>\n</pre></div>\n\n</code></pre><p>As stated above, well-tested code is definitely an advantage of this more goal-driven method.  If you are working on one small feature at a time, it allows you to focus solely on the implications of that feature and nothing else.  This allows you to easily find/fix bugs in your program. If you were attacking multiple features at once, it is easy to miss an edge case.</p>\n<hr>\n<h4 id=\"which-is-better-\">Which is better?</h4>\n<p>While what I have said may make sense (hopefully), it is not always easy to simply pick one of those two coding techniques. For instance, the project I was working on required a large amount of code just to get the initial prototype working as I was starting a project from scratch rather than adding a feature to an already existing service/app.  As a result, it would have been impossible for me to keep my initial code read small.  However, once I finished the basic prototype, the goal driven method was better for adding features as it lent itself to the professional setting nicely.</p>\n<p>As to which is better for general coding practices, I am not sure.  If you are submitting your code for approval, then it is likely that the goal driven technique is the way to go.  However, if you are left to your own devices you face a choice between the two. All summer I attempted to figure out which method allowed me to write better code, and which allowed me to write code more quickly.  Unfortunately, I am still not able to decide.</p>\n<p>On the one hand, writing code incrementally with features seems a little slower, however, it is often times very helpful to get to a stopping point in your project and review what you have done. It is possible that some refactoring/revisions will need to be made to make the code more concise.  Giving yourself stopping points throughout the project allows you to easily make these changes in a timely manner.</p>\n<p>On the other hand, settling down and trying to bust out an entire project with all of its features right off the bat requires a little more design time up front.  You have to spend longer understanding how the project is going to come together as a whole and how the various features will integrate with each other.  That being said, this lengthy design process near the beginning can often help you avoid the annoying refactoring that might be necessary down the road using the goal-driven method.  </p>\n<h4 id=\"wrap-up\">Wrap up</h4>\n<p>I&#39;m not exactly sure how this post came across, it was a fairly abstract concept, but I hope that you gained something from it and that it didnt appear like I was simply rambling for paragraphs and paragraphs. I loved my internship at HomeAway and I thank everyone that helped me while I was there.</p>\n","time":"Sun Aug 23 2015"}}
