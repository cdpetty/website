{"asdf":{"title":"asdf","description":"asdf","body":"<p>This marks the first technical blog post I have ever written, so here goes nothing. What you&#39;re currently looking at is the first website I have ever actually taken all the way to production. Let me tell you about how the site was written.</p>\n<h2 id=\"node-js-and-express-js\">Node.js and Express.js</h2>\n<p>As stated on the <a href=\"http://nodejs.org\">node.js</a> website:</p>\n<blockquote>\n<p>Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications.</p>\n</blockquote>\n<p>As opposed to spinning up a new thread for each user that comes to your site, node operates on a single thread and uses non-blocking io operations. This allows it to easily support thousands of connections.  Another nice advantage to node.js that might be overlooked is the ability to write server-side and client-side code in the same language.</p>\n<p>In addition, node ships with its own package manager, <a href=\"https://www.npmjs.com/\">npm</a>. Through its use of the package.json file, it is easy to manage your project&#39;s packages.</p>\n<p><a href=\"http://expressjs.com\">Express.js</a> is a minimalist web framework that sits over top of node and allows you to more easily develop web apis/apps/etc. One of the key features of express is it&#39;s use of middleware, which allow you to easily inject additional functionality into your web apps. This also keeps express.js from becoming overly bloated. Here&#39;s what an example hello world app would look like using node/express.</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">address</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">().</span><span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Example app listening at http://%s:%s&#39;</span><span class=\"p\">,</span> <span class=\"nx\">host</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre><p>This website was written using node/express. You can view the code <a href=\"&#39;http://github.com/cdpetty/website&#39;\">here</a>.</p>\n<hr>\n<h2 id=\"grunt-the-javascript-task-runner\">Grunt - The JavaScript Task Runner</h2>\n<p>This website makes use of Grunt. It makes getting all of your code production-ready easy (minifying, compiling templates, etc) through the use of grunt tasks and plugins downloaded through npm. To setup grunt, first you need install the command line grunt client:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">-</span><span class=\"nx\">g</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">cli</span>\n</pre></div>\n\n</code></pre><p>as well as the local grunt module:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span>\n</pre></div>\n\n</code></pre><p>Then create a Gruntfile.js in your project directory.  Here is snippet of my grunt file that I use to add vendor prefixes, combine and minify the css into a single file, and then clean up the temporary files.\n    module.exports = function(grunt) {</p>\n<pre><code><div class=\"highlight\"><pre>  <span class=\"c1\">// Project configuration.</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">pkg</span><span class=\"o\">:</span> <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">readJSON</span><span class=\"p\">(</span><span class=\"s1\">&#39;package.json&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">autoprefixer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;public/stylesheets&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;**/*.css&#39;</span> <span class=\"p\">],</span>\n        <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;release/css&#39;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">&#39;release/css/style.min.css&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span> <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">clean</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">stylesheets</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;release/css/**/*.css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!release/css/style.min.css&#39;</span> <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">//Npm tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-cssmin&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-clean&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-autoprefixer&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">//Tasks</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;stylesheets&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;Compiles the stylesheets.&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span> <span class=\"s1\">&#39;autoprefixer:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cssmin:stylesheets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clean:stylesheets&#39;</span> <span class=\"p\">]</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre><p>Lets break down whats going on. The first section of the Gruntfile is the grunt.initConfig section.  This is the section where we configure the options for the various tasks that we want to run. In the initConfig I configure three tasks, autoprefixer, cssmin, clean. Autoprefixer is a grunt task that adds vendor prefixes to css like -webkit-, -moz-, -ms-. In the config we specify a directory for which to look for css files, a globbbing convention for finding applicable files, and a destination for the autoprefixed files.</p>\n<p>In the cssmin config we specify an output file named style.min.css and provide all of the files that have been previously autoprefixed. This will tell cssmin to squash all of the css files into a single file and then minify the whole thing.</p>\n<p>Finally we specify a clean config to get rid of all of the now irrelevant autoprefixed css files.</p>\n<p>The next section loads the actual tasks from npm. Its important to note that for each of the grunt tasks you wish to use, you need to download the corresponding grunt task through npm. For example:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span> <span class=\"o\">--</span><span class=\"nx\">save</span><span class=\"o\">-</span><span class=\"nx\">dev</span> <span class=\"nx\">grunt</span><span class=\"o\">-</span><span class=\"nx\">contrib</span><span class=\"o\">-</span><span class=\"nx\">cssmin</span>\n</pre></div>\n\n</code></pre><p>In the final section, we register the grunt task &#39;stylesheets&#39; and specify which tasks that were configured above should be called.</p>\n<p>Now that you&#39;ve configured your gruntfile, all you need to do to setup your stylesheets is run</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span> <span class=\"nx\">stylesheets</span>\n</pre></div>\n\n</code></pre><p>Grunt makes getting your code production ready much easier than before.  I did run into <a href=\"http://gulpjs.com/\">gulpjs</a>, a newer, stream oriented grunt-esque task manager. It is definitely worth having a look at.</p>\n<hr>\n<p>I&#39;ve enjoyed writing the post and I look forward to writing more in the future. Until then!</p>\n","time":"2015-07-20T04:16:06.211Z"}}
